name: Generate Full PDF with Tabs Unhidden

on:
  push:
    paths:
      - 'ems_pitch_deck.html'
      - '.github/workflows/generate-pdf.yml'
  workflow_dispatch:

jobs:
  render:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install Puppeteer
      run: |
        npm init -y
        npm install puppeteer

    - name: Create Puppeteer Render Script
      run: |
        cat << 'EOF' > render-pdf.js
        const puppeteer = require('puppeteer');
        const path = require('path');
        const fs = require('fs');

        (async () => {
          const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });

          const page = await browser.newPage();
          const htmlPath = path.resolve(__dirname, 'ems_pitch_deck.html');
          const htmlContent = fs.readFileSync(htmlPath, 'utf8');

          await page.setContent(htmlContent, { waitUntil: ['networkidle0', 'domcontentloaded'] });

          // Simulate scrolling
          await page.evaluate(async () => {
            await new Promise(resolve => {
              let totalHeight = 0;
              const distance = 100;
              const timer = setInterval(() => {
                window.scrollBy(0, distance);
                totalHeight += distance;
                if (totalHeight >= document.body.scrollHeight) {
                  clearInterval(timer);
                  resolve();
                }
              }, 150);
            });
          });

          // Unhide all tabs and hidden content
          await page.evaluate(() => {
            // Reveal anything with display: none
            document.querySelectorAll('*').forEach(el => {
              if (window.getComputedStyle(el).display === 'none') {
                el.style.display = 'block';
              }
              // Expand all accordions or tabs
              if (el.hasAttribute('hidden')) {
                el.hidden = false;
              }
              if (el.classList.contains('tab-content')) {
                el.style.display = 'block';
              }
              if (el.style.visibility === 'hidden') {
                el.style.visibility = 'visible';
              }
            });
          });

          // Add print-friendly CSS
          await page.addStyleTag({
            content: `
              * { box-sizing: border-box; }
              body {
                font-family: 'Segoe UI', Roboto, Arial, sans-serif;
                margin: 0; padding: 20px;
              }
              h1, h2, h3, h4 {
                page-break-after: avoid;
                page-break-inside: avoid;
              }
              p, table, div {
                page-break-inside: avoid;
              }
              .pagebreak { page-break-before: always; }
              table {
                width: 100%;
                border-collapse: collapse;
              }
              table td, table th {
                border: 1px solid #999;
                padding: 8px;
              }
            `
          });

          await page.evaluateHandle('document.fonts.ready');

          await page.waitForTimeout(1000);

          await page.pdf({
            path: 'ems_pitch_deck.pdf',
            format: 'A4',
            margin: { top: '20mm', bottom: '20mm', left: '15mm', right: '15mm' },
            printBackground: true,
          });

          await browser.close();
        })();
        EOF

    - name: Run PDF Renderer
      run: node render-pdf.js

    - name: Upload PDF Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ems_pitch_deck
        path: ems_pitch_deck.pdf
